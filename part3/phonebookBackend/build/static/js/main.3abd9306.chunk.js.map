{"version":3,"sources":["components/Filter.js","components/Person.js","components/Persons.js","components/Notification.js","components/PersonForm.js","services/persons.js","App.js","serviceWorker.js","index.js"],"names":["Filter","filter","handleFilter","value","onChange","Person","person","deleteContactById","name","number","onClick","Persons","persons","map","key","Notification","message","className","style","text","PersonForm","newName","newNumber","handleNewName","handleNewNumber","addContact","onSubmit","type","baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","App","useState","setPersons","setNewName","setNewNumber","setFilter","setMessage","personsFilter","setPersonsFilter","useEffect","personService","initialPersons","toUpperCase","includes","updateContact","personObject","result","window","confirm","returnPerson","setTimeout","catch","event","target","preventDefault","some","concat","error","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.3abd9306.chunk.js","sourcesContent":["import React from 'react'\n\nconst Filter = ({ filter, handleFilter }) => {\n    return (\r\n        <div>\n            filter shown with\n            <input\n                value={filter}\n                onChange={handleFilter}\n            />\n        </div>\r\n    )\r\n}\r\n\r\nexport default Filter","import React from 'react'\n\nconst Person = ({ person, deleteContactById }) => {\n    return (\r\n        <li>\r\n            {person.name} {person.number}\r\n            <button onClick={() => deleteContactById(person)}>Delete</button>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Person","import React from 'react'\nimport Person from './Person'\n\nconst Persons = ({ persons, deleteContactById }) => {\n    return (\r\n        <ul>\r\n            {persons.map((person) =>\r\n                <Person key={person.name} person={person} deleteContactById={deleteContactById} />\r\n            )}\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default Persons","import React from 'react'\n\nconst Notification = ({ message }) => {\r\n    if (message === null) {\r\n        return null\r\n    }\r\n    return (\r\n        <div className={message.style}>\r\n            {message.text}\r\n        </div>\r\n    )\r\n}\r\nexport default Notification","import React from 'react'\n\nconst PersonForm = ({ newName, newNumber, handleNewName, handleNewNumber, addContact }) => {\n    return (\n        <form onSubmit={addContact}>\n            <div>\n                name:\n                    <input\n                    value={newName}\n                    onChange={handleNewName}\n                />\n            </div>\n            <div>\n                number:\n                    <input\n                    value={newNumber}\n                    onChange={handleNewNumber}\n                />\n            </div>\n            <div>\n                <button type=\"submit\">Add</button>\n            </div>\n        </form>\r\n    )\r\n}\r\n\r\nexport default PersonForm","import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst deleteObject = (id) => {\r\n    const request = axios.delete(`${baseUrl}/${id}`)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update, deleteObject}","import React, { useState, useEffect } from 'react'\nimport Filter from './components/Filter'\nimport Persons from './components/Persons'\r\nimport Notification from './components/Notification'\r\nimport PersonForm from './components/PersonForm'\r\nimport personService from './services/persons'\r\n\nconst App = () => {\n    const [persons, setPersons] = useState([])\n    const [newName, setNewName] = useState('')\n    const [newNumber, setNewNumber] = useState('')\n    const [filter, setFilter] = useState('')\n    const [message, setMessage] = useState(null)\n    const [personsFilter, setPersonsFilter] = useState([])\n\r\n    useEffect(() => {\r\n        personService\r\n            .getAll()\r\n            .then(initialPersons => {\r\n                    setPersons(initialPersons)\r\n                })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        setPersonsFilter(persons.filter(person => person.name.toUpperCase().includes(filter.toUpperCase())))\r\n    },[filter,persons])\r\n\r\n    const addContact = (event) => {\r\n        event.preventDefault()\r\n        const personObject = {\r\n            name: newName,\r\n            number: newNumber\r\n        }\r\n        persons.some(person => person.name === personObject.name) ? updateContact(personObject)\r\n            : personService\r\n                .create(personObject)\r\n                .then(returnPerson => {\r\n                    setPersons(persons.concat(returnPerson))\r\n                    setNewName('')\r\n                    setNewNumber('')\r\n                    setFilter('')\r\n                    setMessage({\r\n                        text: `Added ${returnPerson.name}`,\r\n                        style: `messageSuccess`\r\n                    })\r\n                    setTimeout(() => {\r\n                        setMessage(null)\r\n                    }, 5000)\r\n                })\r\n                .catch(error => {\r\n                    setMessage({\r\n                        text: `${error.response.data.error}`,\r\n                        style: `messageError`\r\n                    })\r\n                    setTimeout(() => {\r\n                        setMessage(null)\r\n                    }, 5000)\r\n                })\r\n    }\r\n\r\n    const updateContact = (personObject) => {\r\n        const result = window.confirm(`${personObject.name} is already added to phonebook, replace the old number with a new one?`)\r\n        const id = persons.filter(person => person.name === personObject.name)[0].id\r\n        if (result) {\r\n            personService\r\n                .update(id, personObject)\r\n                .then(returnPerson => {\r\n                    setPersons(persons.map(person => person.id !== id ? person : returnPerson))\r\n                    setNewName('')\r\n                    setNewNumber('')\r\n                    setFilter('')\r\n                    setMessage({\r\n                        text: `Number of ${returnPerson.name} has been updated`,\r\n                        style: `messageSuccess`\r\n                    })\r\n                    setTimeout(() => {\r\n                        setMessage(null)\r\n                    }, 5000)\r\n                })\r\n                .catch(() => {\r\n                    setMessage({\r\n                        text: `Information of ${personObject.name} has already been removed from server`,\r\n                        style: `messageError`\r\n                    })\r\n                    setTimeout(() => {\r\n                        setMessage(null)\r\n                    }, 5000)\r\n                })\r\n        }\r\n    }\r\n\r\n    const deleteContactById = (personObject) => {\r\n        const result = window.confirm(`Do you want do delete ${personObject.name} from the list ?`)\r\n        if (result) {\r\n            personService\r\n                .deleteObject(personObject.id)\r\n                .then(() => {\r\n                    setPersons(persons.filter(person => person.id !== personObject.id))\r\n                    setNewName('')\r\n                    setNewNumber('')\r\n                    setFilter('')\r\n                })\r\n                .catch(() => {\r\n                    setMessage({\r\n                        text: `Information of ${personObject.name} has already been removed from server`,\r\n                        style: `messageError`\r\n                    })\r\n                    setTimeout(() => {\r\n                        setMessage(null)\r\n                    }, 5000)\r\n                })\r\n        }\r\n    }\r\n\n    const handleFilter = (event) => {\n        setFilter(event.target.value)\r\n    }\n\n    const handleNewName = (event) => {\n        setNewName(event.target.value)\r\n    }\n\n    const handleNewNumber = (event) => {\n        setNewNumber(event.target.value)\r\n    }\n\n    return (\n        <div>\n            <h1>Phonebook</h1>\n            <Notification message={message} />\n            <Filter filter={filter} handleFilter={handleFilter} />\n            <h3>Add a new</h3>\n            <PersonForm newName={newName} newNumber={newNumber} handleNewName={handleNewName} handleNewNumber={handleNewNumber} addContact={addContact} />\n            <h3>Numbers</h3>\n            <Persons persons={personsFilter} deleteContactById={deleteContactById} />\n        </div>\n    )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\r\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\r\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}